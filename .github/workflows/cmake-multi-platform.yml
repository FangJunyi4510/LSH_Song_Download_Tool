name: Multi-Platform Build

permissions:
  contents: write
  packages: read

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        include:
          - os: ubuntu-latest
            artifact_name: linux-release
            exe_path: build/LSH_Song_Download_Tool
          - os: windows-latest
            artifact_name: windows-release
            exe_path: build/Release/LSH_Song_Download_Tool.exe

    steps:
    - uses: actions/checkout@v4

    - name: Install Qt (Windows)
      if: runner.os == 'Windows'
      uses: jurplel/install-qt-action@v3
      with:
        version: 6.4.0
        host: windows
        target: desktop
        arch: win64_msvc2019_64
        auto-modules: true

    - name: Install Qt (Linux)
      if: runner.os == 'Linux'
      uses: jurplel/install-qt-action@v3
      with:
        version: 6.4.0
        host: linux
        target: desktop
        arch: gcc_64
        auto-modules: true

    - name: Setup Build Env
      shell: bash
      run: |
        mkdir -p build
        if [ "$RUNNER_OS" == "Windows" ]; then
          echo "BUILD_DIR=$GITHUB_WORKSPACE\\build" >> $GITHUB_ENV
        else
          echo "BUILD_DIR=$GITHUB_WORKSPACE/build" >> $GITHUB_ENV
        fi

    - name: Configure CMake
      shell: bash
      run: cmake -B $BUILD_DIR -DCMAKE_BUILD_TYPE=Release -S .

    - name: Build (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        cmake --build "%BUILD_DIR%" --config Release --target ALL_BUILD

    - name: Build (Linux)
      if: runner.os == 'Linux'
      run: cmake --build $BUILD_DIR --config Release

    - name: Package Artifacts
      shell: bash
      run: |
        mkdir -p package
        cp ${{ matrix.exe_path }} package/
        if [ "$RUNNER_OS" = "Windows" ]; then
          pwsh -Command "Compress-Archive -Path package/* -DestinationPath windows-release.zip"
        else
          tar -czvf windows-release.tar.gz -C package .
        fi

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_name }}.*

  deploy-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            linux-release.tar.gz
            windows-release.zip
          draft: false
          prerelease: false
          body: ${{ github.event.head_commit.message }}
